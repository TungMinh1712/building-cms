import React, { useState, useEffect } from "react";
import { initialData as BanQuanTriList } from "./BanQuanTriList"; // Gi·∫£ s·ª≠ BanQuanTriList ƒë∆∞·ª£c import t·ª´ file kh√°c

const KhieuNai = () => {
  const [khieuNaiList, setKhieuNaiList] = useState(() => {
    const saved = localStorage.getItem("khieuNaiList");
    return saved
      ? JSON.parse(saved)
      : [
          {
            id: 1,
            hoTen: "Nguy·ªÖn VƒÉn A",
            noiDung: "Ti·∫øng ·ªìn t·ª´ cƒÉn h·ªô t·∫ßng tr√™n.",
            ngayGui: "2025-05-20",
            trangThai: "Ch∆∞a x·ª≠ l√Ω",
            nguoiPhuTrachId: null,
          },
          {
            id: 2,
            hoTen: "Tr·∫ßn Th·ªã B",
            noiDung: "M√πi r√°c h√†nh lang g√¢y kh√≥ ch·ªãu.",
            ngayGui: "2025-05-21",
            trangThai: "ƒê√£ gi·∫£i quy·∫øt",
            nguoiPhuTrachId: 2,
          },
          {
            id: 3,
            hoTen: "L√™ VƒÉn C",
            noiDung: "Thang m√°y hay b·ªã h·ªèng.",
            ngayGui: "2025-05-22",
            trangThai: "ƒêang x·ª≠ l√Ω",
            nguoiPhuTrachId: 1, // Ch∆∞a g√°n
          },
          {
            id: 4,
            hoTen: "Ph·∫°m Th·ªã D",
            noiDung: "H√†nh lang kh√¥ng ƒë∆∞·ª£c v·ªá sinh th∆∞·ªùng xuy√™n.",
            ngayGui: "2025-05-23",
            trangThai: "Ch∆∞a x·ª≠ l√Ω",
            nguoiPhuTrachId: 3,
          },
          {
            id: 5,
            hoTen: "Ho√†ng VƒÉn E",
            noiDung: "Ch√≥ ƒëi v·ªá sinh b·ª´a b√£i khu v·ª±c c√¥ng c·ªông.",
            ngayGui: "2025-05-23",
            trangThai: "ƒê√£ gi·∫£i quy·∫øt",
            nguoiPhuTrachId: 4,
          },
          {
            id: 6,
            hoTen: "ƒê·ªó Th·ªã F",
            noiDung: "Kh√¥ng c√≥ ch·ªó ƒë·∫≠u xe cho kh√°ch.",
            ngayGui: "2025-05-24",
            trangThai: "ƒêang x·ª≠ l√Ω",
            nguoiPhuTrachId: 9,
          },
          {
            id: 7,
            hoTen: "Tr·ªãnh VƒÉn G",
            noiDung: "Camera an ninh ho·∫°t ƒë·ªông kh√¥ng ·ªïn ƒë·ªãnh.",
            ngayGui: "2025-05-25",
            trangThai: "Ch∆∞a x·ª≠ l√Ω",
            nguoiPhuTrachId: 5,
          },
          {
            id: 8,
            hoTen: "Ng√¥ Th·ªã H",
            noiDung: "Ban qu·∫£n l√Ω kh√¥ng ph·∫£n h·ªìi email.",
            ngayGui: "2025-05-26",
            trangThai: "Ch∆∞a x·ª≠ l√Ω",
            nguoiPhuTrachId: null,
          },
          {
            id: 9,
            hoTen: "B√πi VƒÉn I",
            noiDung: "H·ªá th·ªëng ƒëi·ªán h√†nh lang ch·∫≠p ch·ªùn.",
            ngayGui: "2025-05-26",
            trangThai: "ƒêang x·ª≠ l√Ω",
            nguoiPhuTrachId: 6,
          },
          {
            id: 10,
            hoTen: "L√Ω Th·ªã K",
            noiDung: "Kh√¥ng c√≥ n∆∞·ªõc n√≥ng v√†o bu·ªïi s√°ng.",
            ngayGui: "2025-05-27",
            trangThai: "ƒê√£ gi·∫£i quy·∫øt",
            nguoiPhuTrachId: 7,
          },
        ];
  });

  const [filterTrangThai, setFilterTrangThai] = useState("T·∫•t c·∫£");
  const [searchDate, setSearchDate] = useState("");
  const [editingId, setEditingId] = useState(null);
  const [editingNguoiPhuTrachId, setEditingNguoiPhuTrachId] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedKhieuNai, setSelectedKhieuNai] = useState(null);
  const itemsPerPage = 5;

  useEffect(() => {
    localStorage.setItem("khieuNaiList", JSON.stringify(khieuNaiList));
  }, [khieuNaiList]);

  const handleTrangThaiChange = (id, newTrangThai) => {
    const updatedList = khieuNaiList.map((item) =>
      item.id === id ? { ...item, trangThai: newTrangThai } : item
    );
    setKhieuNaiList(updatedList);
    setSelectedKhieuNai((prev) =>
      prev && prev.id === id ? { ...prev, trangThai: newTrangThai } : prev
    );
    setEditingId(null);
  };

  const handleNguoiPhuTrachChange = (id, newNguoiPhuTrachId) => {
    const updatedList = khieuNaiList.map((item) =>
      item.id === id
        ? {
            ...item,
            nguoiPhuTrachId: newNguoiPhuTrachId
              ? Number(newNguoiPhuTrachId)
              : null,
          }
        : item
    );
    setKhieuNaiList(updatedList);
    setSelectedKhieuNai((prev) =>
      prev && prev.id === id
        ? {
            ...prev,
            nguoiPhuTrachId: newNguoiPhuTrachId
              ? Number(newNguoiPhuTrachId)
              : null,
          }
        : prev
    );
    setEditingNguoiPhuTrachId(null);
  };

  const handleDeleteKhieuNai = (id) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a khi·∫øu n·∫°i n√†y?")) {
      const updatedList = khieuNaiList.filter((item) => item.id !== id);
      setKhieuNaiList(updatedList);
      if (selectedKhieuNai && selectedKhieuNai.id === id) {
        setSelectedKhieuNai(null);
      }
      const totalPagesAfterDelete = Math.ceil(
        updatedList.length / itemsPerPage
      );
      if (currentPage > totalPagesAfterDelete && totalPagesAfterDelete > 0) {
        setCurrentPage(totalPagesAfterDelete);
      }
    }
  };

  const getColor = (trangThai) => {
    switch (trangThai) {
      case "Ch∆∞a x·ª≠ l√Ω":
        return "red";
      case "ƒêang x·ª≠ l√Ω":
        return "orange";
      case "ƒê√£ gi·∫£i quy·∫øt":
        return "green";
      default:
        return "black";
    }
  };

  const getNguoiPhuTrachName = (nguoiPhuTrachId) => {
    if (!nguoiPhuTrachId) return "Ch∆∞a ph√¢n c√¥ng";
    const nguoiPhuTrach = BanQuanTriList.find(
      (member) => member.id === nguoiPhuTrachId
    );
    return nguoiPhuTrach ? nguoiPhuTrach.name : "Ch∆∞a ph√¢n c√¥ng";
  };

  const filteredList = khieuNaiList.filter((item) => {
    const matchTrangThai =
      filterTrangThai === "T·∫•t c·∫£" || item.trangThai === filterTrangThai;
    const matchDate = !searchDate || item.ngayGui === searchDate;
    return matchTrangThai && matchDate;
  });

  const totalPages = Math.ceil(filteredList.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const paginatedList = filteredList.slice(
    startIndex,
    startIndex + itemsPerPage
  );

  const handleSelectKhieuNai = (item) => {
    setSelectedKhieuNai(item);
  };

  const handleCloseDetail = () => {
    setSelectedKhieuNai(null);
  };

  return (
    <div style={{ maxWidth: 900, margin: "auto" }}>
      <h2>ü§¨ Danh s√°ch Khi·∫øu N·∫°i</h2>

      {/* B·ªô l·ªçc */}
      <div style={{ marginBottom: 20 }}>
        <label style={{ marginRight: 10 }}>L·ªçc theo tr·∫°ng th√°i:</label>
        <select
          value={filterTrangThai}
          onChange={(e) => {
            setFilterTrangThai(e.target.value);
            setCurrentPage(1);
            setSelectedKhieuNai(null);
          }}
          style={{ marginRight: 20 }}
        >
          <option value="T·∫•t c·∫£">T·∫•t c·∫£</option>
          <option value="Ch∆∞a x·ª≠ l√Ω">Ch∆∞a x·ª≠ l√Ω</option>
          <option value="ƒêang x·ª≠ l√Ω">ƒêang x·ª≠ l√Ω</option>
          <option value="ƒê√£ gi·∫£i quy·∫øt">ƒê√£ gi·∫£i quy·∫øt</option>
        </select>

        <label style={{ marginRight: 10 }}>T√¨m theo ng√†y g·ª≠i:</label>
        <input
          type="date"
          value={searchDate}
          onChange={(e) => {
            setSearchDate(e.target.value);
            setCurrentPage(1);
            setSelectedKhieuNai(null);
          }}
        />
      </div>

      {/* B·∫£ng khi·∫øu n·∫°i */}
      <table
        border="1"
        cellPadding="8"
        style={{ width: "100%", borderCollapse: "collapse" }}
      >
        <thead style={{ backgroundColor: "#f5f5f5" }}>
          <tr>
            <th>STT</th>
            <th>H·ªç t√™n</th>
            <th>Ng√†y g·ª≠i</th>
            <th>Tr·∫°ng th√°i</th>
            <th>Ng∆∞·ªùi ph·ª• tr√°ch</th>
            <th>H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {paginatedList.length === 0 ? (
            <tr>
              <td colSpan="6" style={{ textAlign: "center" }}>
                Kh√¥ng t√¨m th·∫•y khi·∫øu n·∫°i ph√π h·ª£p.
              </td>
            </tr>
          ) : (
            paginatedList.map((item, index) => (
              <tr
                key={item.id}
                onClick={() => handleSelectKhieuNai(item)}
                style={{
                  cursor: "pointer",
                  backgroundColor:
                    selectedKhieuNai && selectedKhieuNai.id === item.id
                      ? "#fff3cd"
                      : "transparent",
                }}
              >
                <td>{startIndex + index + 1}</td>
                <td>{item.hoTen}</td>
                <td>{item.ngayGui}</td>
                <td>
                  {editingId === item.id ? (
                    <select
                      value={item.trangThai}
                      onChange={(e) =>
                        handleTrangThaiChange(item.id, e.target.value)
                      }
                    >
                      <option value="Ch∆∞a x·ª≠ l√Ω">Ch∆∞a x·ª≠ l√Ω</option>
                      <option value="ƒêang x·ª≠ l√Ω">ƒêang x·ª≠ l√Ω</option>
                      <option value="ƒê√£ gi·∫£i quy·∫øt">ƒê√£ gi·∫£i quy·∫øt</option>
                    </select>
                  ) : (
                    <span
                      style={{
                        color: getColor(item.trangThai),
                        fontWeight: "bold",
                        cursor: "pointer",
                      }}
                      onClick={(e) => {
                        e.stopPropagation();
                        setEditingId(item.id);
                      }}
                    >
                      {item.trangThai}
                    </span>
                  )}
                </td>
                <td>
                  {editingNguoiPhuTrachId === item.id ? (
                    <select
                      value={item.nguoiPhuTrachId || ""}
                      onChange={(e) =>
                        handleNguoiPhuTrachChange(item.id, e.target.value)
                      }
                    >
                      <option value="">Ch∆∞a ph√¢n c√¥ng</option>
                      {BanQuanTriList.map((member) => (
                        <option key={member.id} value={member.id}>
                          {member.name}
                        </option>
                      ))}
                    </select>
                  ) : (
                    <span
                      style={{
                        fontWeight: "bold",
                        cursor: "pointer",
                      }}
                      onClick={(e) => {
                        e.stopPropagation();
                        setEditingNguoiPhuTrachId(item.id);
                      }}
                    >
                      {getNguoiPhuTrachName(item.nguoiPhuTrachId)}
                    </span>
                  )}
                </td>
                <td>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      handleDeleteKhieuNai(item.id);
                    }}
                    style={{
                      backgroundColor: "#dc3545",
                      color: "white",
                      border: "none",
                      padding: "5px 10px",
                      cursor: "pointer",
                      borderRadius: "4px",
                    }}
                  >
                    üóëÔ∏è X√≥a
                  </button>
                </td>
              </tr>
            ))
          )}
        </tbody>
      </table>

      {/* ƒêi·ªÅu khi·ªÉn ph√¢n trang */}
      <div style={{ marginBottom: 20, textAlign: "center" }}>
        <button
          onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}
          disabled={currentPage === 1}
        >
          ‚óÄ Tr∆∞·ªõc
        </button>
        <span style={{ margin: "0 10px" }}>
          Trang {currentPage} / {totalPages}
        </span>
        <button
          onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))}
          disabled={currentPage === totalPages}
        >
          Sau ‚ñ∂
        </button>
      </div>

      {/* Chi ti·∫øt khi·∫øu n·∫°i */}
      {selectedKhieuNai && (
        <div
          style={{
            border: "1px solid #ddd",
            padding: 15,
            borderRadius: 6,
            marginTop: 20,
            backgroundColor: "#fafafa",
          }}
        >
          <h3>Chi ti·∫øt Khi·∫øu N·∫°i</h3>
          <p>
            <strong>ID:</strong> {selectedKhieuNai.id}
          </p>
          <p>
            <strong>H·ªç t√™n:</strong> {selectedKhieuNai.hoTen}
          </p>
          <p>
            <strong>N·ªôi dung:</strong> {selectedKhieuNai.noiDung}
          </p>
          <p>
            <strong>Ng√†y g·ª≠i:</strong> {selectedKhieuNai.ngayGui}
          </p>
          <p>
            <strong>Tr·∫°ng th√°i:</strong>{" "}
            <span style={{ color: getColor(selectedKhieuNai.trangThai) }}>
              {selectedKhieuNai.trangThai}
            </span>
          </p>
          <p>
            <strong>Ng∆∞·ªùi ph·ª• tr√°ch:</strong>{" "}
            {editingNguoiPhuTrachId === selectedKhieuNai.id ? (
              <select
                value={selectedKhieuNai.nguoiPhuTrachId || ""}
                onChange={(e) =>
                  handleNguoiPhuTrachChange(selectedKhieuNai.id, e.target.value)
                }
              >
                <option value="">Ch∆∞a ph√¢n c√¥ng</option>
                {BanQuanTriList.map((member) => (
                  <option key={member.id} value={member.id}>
                    {member.name}
                  </option>
                ))}
              </select>
            ) : (
              <span
                style={{ cursor: "pointer" }}
                onClick={() => setEditingNguoiPhuTrachId(selectedKhieuNai.id)}
              >
                {getNguoiPhuTrachName(selectedKhieuNai.nguoiPhuTrachId)}
              </span>
            )}
          </p>
          <button
            onClick={handleCloseDetail}
            style={{
              backgroundColor: "#dc3545",
              color: "white",
              padding: "8px 16px",
              marginRight: "10px",
            }}
          >
            ƒê√≥ng
          </button>
          <button
            onClick={() => handleDeleteKhieuNai(selectedKhieuNai.id)}
            style={{
              backgroundColor: "#dc3545",
              color: "white",
              padding: "8px 16px",
            }}
          >
            üóëÔ∏è X√≥a
          </button>
        </div>
      )}
    </div>
  );
};

export default KhieuNai;

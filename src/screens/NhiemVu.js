import React, { useState, useEffect } from "react";
import { initialData } from "./BanQuanTriList"; // Import initialData l√†m fallback

const initialTasks = [
  {
    id: 1,
    title: "Ki·ªÉm tra b√°o c√°o th√°ng 5",
    status: "Ch∆∞a ho√†n th√†nh",
    assignee: "",
    deadline: "2025-05-30",
  },
  {
    id: 2,
    title: "H·ªçp Ban qu·∫£n tr·ªã",
    status: "ƒê√£ ho√†n th√†nh",
    assignee: "Tr·∫ßn Th·ªã B√¨nh",
    deadline: "2025-05-15",
  },
  {
    id: 3,
    title: "C·∫≠p nh·∫≠t t√†i li·ªáu d·ª± √°n",
    status: "Ch∆∞a ho√†n th√†nh",
    assignee: "",
    deadline: "2025-06-01",
  },
  {
    id: 4,
    title: "Ki·ªÉm tra h·ªá th·ªëng PCCC",
    status: "Ch∆∞a ho√†n th√†nh",
    assignee: "Nguy·ªÖn VƒÉn An",
    deadline: "2025-06-05",
  },
  {
    id: 5,
    title: "Chu·∫©n b·ªã n·ªôi dung h·ªçp th√°ng 6",
    status: "ƒê√£ ho√†n th√†nh",
    assignee: "L√™ VƒÉn C∆∞·ªùng",
    deadline: "2025-05-28",
  },
  {
    id: 6,
    title: "G·ª≠i email m·ªùi h·ªçp",
    status: "ƒê√£ ho√†n th√†nh",
    assignee: "Ph·∫°m Th·ªã Dung",
    deadline: "2025-05-20",
  },
  {
    id: 7,
    title: "T·ªïng h·ª£p √Ω ki·∫øn c∆∞ d√¢n",
    status: "Ch∆∞a ho√†n th√†nh",
    assignee: "Tr·∫ßn Th·ªã B√¨nh",
    deadline: "2025-06-07",
  },
  {
    id: 8,
    title: "Ho√†n thi·ªán b√°o c√°o t√†i ch√≠nh qu√Ω II",
    status: "Ch∆∞a ho√†n th√†nh",
    assignee: "Nguy·ªÖn VƒÉn An",
    deadline: "2025-06-10",
  },
  {
    id: 9,
    title: "C·∫≠p nh·∫≠t ph·∫ßn m·ªÅm qu·∫£n l√Ω",
    status: "Ch∆∞a ho√†n th√†nh",
    assignee: "L√™ VƒÉn C∆∞·ªùng",
    deadline: "2025-06-12",
  },
  {
    id: 10,
    title: "Ki·ªÉm k√™ trang thi·∫øt b·ªã vƒÉn ph√≤ng",
    status: "Ch∆∞a ho√†n th√†nh",
    assignee: "",
    deadline: "2025-06-15",
  },
];

const STORAGE_KEY = "tasks_nhiemvu";
const BAN_QUAN_TRI_STORAGE_KEY = "banQuanTriData";

const NhiemVu = () => {
  // State ƒë·ªÉ l∆∞u danh s√°ch ng∆∞·ªùi ph·ª• tr√°ch
  const [assignees, setAssignees] = useState(() => {
    const stored = localStorage.getItem(BAN_QUAN_TRI_STORAGE_KEY);
    const data = stored ? JSON.parse(stored) : initialData;
    return data.map((item) => item.name);
  });

  // L·∫•y data t·ª´ localStorage n·∫øu c√≥, kh√¥ng th√¨ d√πng initialTasks
  const [tasks, setTasks] = useState(() => {
    const saved = localStorage.getItem(STORAGE_KEY);
    return saved ? JSON.parse(saved) : initialTasks;
  });

  const [form, setForm] = useState({
    title: "",
    status: "Ch∆∞a ho√†n th√†nh",
    assignee: assignees[0] || "", // Gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† t√™n ƒë·∫ßu ti√™n trong danh s√°ch
    deadline: "",
  });
  const [editingId, setEditingId] = useState(null);
  const [search, setSearch] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;

  // ƒê·ªìng b·ªô danh s√°ch assignees khi localStorage thay ƒë·ªïi
  useEffect(() => {
    const handleStorageChange = () => {
      const stored = localStorage.getItem(BAN_QUAN_TRI_STORAGE_KEY);
      const data = stored ? JSON.parse(stored) : initialData;
      const newAssignees = data.map((item) => item.name);
      setAssignees(newAssignees);

      // C·∫≠p nh·∫≠t form.assignee n·∫øu gi√° tr·ªã hi·ªán t·∫°i kh√¥ng c√≤n trong danh s√°ch
      if (!newAssignees.includes(form.assignee)) {
        setForm((prev) => ({
          ...prev,
          assignee: newAssignees[0] || "",
        }));
      }
    };

    // L·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi localStorage
    window.addEventListener("storage", handleStorageChange);

    // Ki·ªÉm tra localStorage ban ƒë·∫ßu
    handleStorageChange();

    return () => {
      window.removeEventListener("storage", handleStorageChange);
    };
  }, [form.assignee]);

  // H√†m c·∫≠p nh·∫≠t task v√† ƒë·ªìng b·ªô localStorage
  const updateTasks = (newTasks) => {
    setTasks(newTasks);
    localStorage.setItem(STORAGE_KEY, JSON.stringify(newTasks));
  };

  const handleAdd = () => {
    if (!form.title.trim()) {
      alert("C·∫ßn nh·∫≠p ti√™u ƒë·ªÅ nhi·ªám v·ª•!");
      return;
    }
    if (!form.assignee) {
      alert("C·∫ßn ch·ªçn ng∆∞·ªùi ph·ª• tr√°ch!");
      return;
    }
    if (!assignees.includes(form.assignee)) {
      alert("Ng∆∞·ªùi ph·ª• tr√°ch kh√¥ng h·ª£p l·ªá!");
      return;
    }
    if (!form.deadline) {
      alert("C·∫ßn ch·ªçn h·∫°n ch√≥t cho nhi·ªám v·ª•!");
      return;
    }
    const newId =
      tasks.length > 0 ? Math.max(...tasks.map((t) => t.id)) + 1 : 1;
    const newTasks = [...tasks, { id: newId, ...form }];
    updateTasks(newTasks);
    setCurrentPage(Math.ceil(newTasks.length / itemsPerPage));
    setForm({
      title: "",
      status: "Ch∆∞a ho√†n th√†nh",
      assignee: assignees[0] || "",
      deadline: "",
    });
  };

  const handleEdit = (task) => {
    setEditingId(task.id);
    setForm({
      title: task.title,
      status: task.status,
      assignee: task.assignee,
      deadline: task.deadline,
    });
  };

  const handleSave = () => {
    if (!form.title.trim()) {
      alert("C·∫ßn nh·∫≠p ti√™u ƒë·ªÅ nhi·ªám v·ª•!");
      return;
    }
    if (!form.assignee) {
      alert("C·∫ßn ch·ªçn ng∆∞·ªùi ph·ª• tr√°ch!");
      return;
    }
    if (!assignees.includes(form.assignee)) {
      alert("Ng∆∞·ªùi ph·ª• tr√°ch kh√¥ng h·ª£p l·ªá!");
      return;
    }
    if (!form.deadline) {
      alert("C·∫ßn ch·ªçn h·∫°n ch√≥t cho nhi·ªám v·ª•!");
      return;
    }
    const newTasks = tasks.map((t) =>
      t.id === editingId ? { id: editingId, ...form } : t
    );
    updateTasks(newTasks);
    setEditingId(null);
    setForm({
      title: "",
      status: "Ch∆∞a ho√†n th√†nh",
      assignee: assignees[0] || "",
      deadline: "",
    });
  };

  const handleCancel = () => {
    setEditingId(null);
    setForm({
      title: "",
      status: "Ch∆∞a ho√†n th√†nh",
      assignee: assignees[0] || "",
      deadline: "",
    });
  };

  const handleDelete = (id) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a nhi·ªám v·ª• n√†y?")) {
      const newTasks = tasks.filter((t) => t.id !== id);
      updateTasks(newTasks);
      const maxPage = Math.ceil(newTasks.length / itemsPerPage);
      setCurrentPage((prev) => Math.min(prev, maxPage || 1));
    }
  };

  const filteredTasks = tasks.filter((t) =>
    t.title.toLowerCase().includes(search.toLowerCase())
  );

  const totalPages = Math.ceil(filteredTasks.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const paginatedTasks = filteredTasks.slice(
    startIndex,
    startIndex + itemsPerPage
  );

  return (
    <div style={{ maxWidth: 900, margin: "auto" }}>
      <h2>Danh s√°ch Nhi·ªám V·ª•</h2>

      <input
        type="text"
        placeholder="üîç T√¨m theo ti√™u ƒë·ªÅ nhi·ªám v·ª•..."
        value={search}
        onChange={(e) => {
          setSearch(e.target.value);
          setCurrentPage(1);
        }}
        style={{ width: "100%", padding: 8, marginBottom: 12 }}
      />

      <table
        border="1"
        cellPadding="8"
        cellSpacing="0"
        style={{ width: "100%", marginBottom: 20, borderCollapse: "collapse" }}
      >
        <thead style={{ backgroundColor: "#f0f0f0" }}>
          <tr>
            <th>ID</th>
            <th>Ti√™u ƒë·ªÅ nhi·ªám v·ª•</th>
            <th>Tr·∫°ng th√°i</th>
            <th>Ng∆∞·ªùi ph·ª• tr√°ch</th>
            <th>H·∫°n ch√≥t</th>
            <th>H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {paginatedTasks.length === 0 && (
            <tr>
              <td colSpan="6" style={{ textAlign: "center", color: "gray" }}>
                Kh√¥ng c√≥ nhi·ªám v·ª• ph√π h·ª£p.
              </td>
            </tr>
          )}

          {paginatedTasks.map((task) => (
            <tr
              key={task.id}
              style={
                editingId === task.id ? { backgroundColor: "#f0f0f0" } : {}
              }
            >
              <td>{task.id}</td>

              <td>
                {editingId === task.id ? (
                  <input
                    type="text"
                    value={form.title}
                    onChange={(e) =>
                      setForm({ ...form, title: e.target.value })
                    }
                    style={{ width: "100%" }}
                  />
                ) : (
                  task.title
                )}
              </td>

              <td
                style={{
                  color: task.status === "ƒê√£ ho√†n th√†nh" ? "green" : "black",
                  fontWeight:
                    task.status === "ƒê√£ ho√†n th√†nh" ? "bold" : "normal",
                }}
              >
                {editingId === task.id ? (
                  <select
                    value={form.status}
                    onChange={(e) =>
                      setForm({ ...form, status: e.target.value })
                    }
                  >
                    <option value="Ch∆∞a ho√†n th√†nh">Ch∆∞a ho√†n th√†nh</option>
                    <option value="ƒê√£ ho√†n th√†nh">ƒê√£ ho√†n th√†nh</option>
                  </select>
                ) : (
                  task.status
                )}
              </td>

              <td>
                {editingId === task.id ? (
                  <select
                    value={
                      assignees.includes(form.assignee) ? form.assignee : ""
                    }
                    onChange={(e) =>
                      setForm({ ...form, assignee: e.target.value })
                    }
                  >
                    <option value="" disabled>
                      Ch·ªçn ng∆∞·ªùi ph·ª• tr√°ch
                    </option>
                    {assignees.map((name) => (
                      <option key={name} value={name}>
                        {name}
                      </option>
                    ))}
                  </select>
                ) : (
                  task.assignee || ""
                )}
              </td>

              <td>
                {editingId === task.id ? (
                  <input
                    type="date"
                    value={form.deadline}
                    onChange={(e) =>
                      setForm({ ...form, deadline: e.target.value })
                    }
                  />
                ) : (
                  task.deadline
                )}
              </td>

              <td>
                {editingId === task.id ? (
                  <>
                    <button
                      onClick={handleSave}
                      style={{ marginRight: 8 }}
                      title="L∆∞u thay ƒë·ªïi"
                    >
                      üíæ L∆∞u
                    </button>
                    <button onClick={handleCancel} title="H·ªßy">
                      ‚ùå H·ªßy
                    </button>
                  </>
                ) : (
                  <>
                    <button
                      onClick={() => handleEdit(task)}
                      style={{ marginRight: 8 }}
                      title="S·ª≠a"
                    >
                      ‚úèÔ∏è S·ª≠a
                    </button>
                    <button onClick={() => handleDelete(task.id)} title="X√≥a">
                      üóëÔ∏è X√≥a
                    </button>
                  </>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <div style={{ marginBottom: 20, textAlign: "center" }}>
        <button
          onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}
          disabled={currentPage === 1}
        >
          ‚óÄ Tr∆∞·ªõc
        </button>
        <span style={{ margin: "0 10px" }}>
          Trang {currentPage} / {totalPages}
        </span>
        <button
          onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))}
          disabled={currentPage === totalPages}
        >
          Sau ‚ñ∂
        </button>
      </div>

      <h3>Th√™m nhi·ªám v·ª• m·ªõi</h3>
      <div
        style={{ display: "flex", gap: 10, marginBottom: 40, flexWrap: "wrap" }}
      >
        <input
          type="text"
          placeholder="Ti√™u ƒë·ªÅ nhi·ªám v·ª•"
          value={form.title}
          onChange={(e) => setForm({ ...form, title: e.target.value })}
          style={{ flexGrow: 1, minWidth: 200 }}
        />
        <select
          value={form.status}
          onChange={(e) => setForm({ ...form, status: e.target.value })}
        >
          <option value="Ch∆∞a ho√†n th√†nh">Ch∆∞a ho√†n th√†nh</option>
          <option value="ƒê√£ ho√†n th√†nh">ƒê√£ ho√†n th√†nh</option>
        </select>
        <select
          value={form.assignee}
          onChange={(e) => setForm({ ...form, assignee: e.target.value })}
        >
          <option value="" disabled>
            Ch·ªçn ng∆∞·ªùi ph·ª• tr√°ch
          </option>
          {assignees.map((name) => (
            <option key={name} value={name}>
              {name}
            </option>
          ))}
        </select>
        <input
          type="date"
          value={form.deadline}
          onChange={(e) => setForm({ ...form, deadline: e.target.value })}
        />
        {!editingId && (
          <button
            onClick={handleAdd}
            style={{ backgroundColor: "#4CAF50", color: "white" }}
            disabled={assignees.length === 0}
          >
            ‚ûï Th√™m
          </button>
        )}
      </div>
    </div>
  );
};

export default NhiemVu;
